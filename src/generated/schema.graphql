### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


scalar DateTime

type Ingredients {
  id: String!
  quantity: String!
  title: String!
  type: String!
}

input IngredientsCreateManyWithoutRecipeInput {
  connect: [IngredientsWhereUniqueInput!]
  create: [IngredientsCreateWithoutRecipeInput!]
}

input IngredientsCreateWithoutRecipeInput {
  id: String
  quantity: String!
  title: String!
  type: String!
}

input IngredientsScalarWhereInput {
  AND: [IngredientsScalarWhereInput!]
  id: StringFilter
  NOT: [IngredientsScalarWhereInput!]
  OR: [IngredientsScalarWhereInput!]
  quantity: StringFilter
  title: StringFilter
  type: StringFilter
}

input IngredientsUpdateManyDataInput {
  id: String
  quantity: String
  title: String
  type: String
}

input IngredientsUpdateManyWithoutRecipeInput {
  connect: [IngredientsWhereUniqueInput!]
  create: [IngredientsCreateWithoutRecipeInput!]
  delete: [IngredientsWhereUniqueInput!]
  deleteMany: [IngredientsScalarWhereInput!]
  disconnect: [IngredientsWhereUniqueInput!]
  set: [IngredientsWhereUniqueInput!]
  update: [IngredientsUpdateWithWhereUniqueWithoutRecipeInput!]
  updateMany: [IngredientsUpdateManyWithWhereNestedInput!]
  upsert: [IngredientsUpsertWithWhereUniqueWithoutRecipeInput!]
}

input IngredientsUpdateManyWithWhereNestedInput {
  data: IngredientsUpdateManyDataInput!
  where: IngredientsScalarWhereInput!
}

input IngredientsUpdateWithoutRecipeDataInput {
  id: String
  quantity: String
  title: String
  type: String
}

input IngredientsUpdateWithWhereUniqueWithoutRecipeInput {
  data: IngredientsUpdateWithoutRecipeDataInput!
  where: IngredientsWhereUniqueInput!
}

input IngredientsUpsertWithWhereUniqueWithoutRecipeInput {
  create: IngredientsCreateWithoutRecipeInput!
  update: IngredientsUpdateWithoutRecipeDataInput!
  where: IngredientsWhereUniqueInput!
}

input IngredientsWhereUniqueInput {
  id: String
}

type Mutation {
  createOneRecipe(data: RecipeCreateInput!): Recipe!
  deleteOneRecipe(where: RecipeWhereUniqueInput!): Recipe
  updateOneRecipe(data: RecipeUpdateInput!, where: RecipeWhereUniqueInput!): Recipe
}

type Query {
  Recipe(id: ID): Recipe
  Recipes(searchString: String): [Recipe!]!
  simpleRecipe(id: ID): simpleRecipe
  simpleRecipes(searchString: String): [simpleRecipe!]!
}

type Recipe {
  createdAt: DateTime!
  id: String!
  ingredients(after: IngredientsWhereUniqueInput, before: IngredientsWhereUniqueInput, first: Int, last: Int, skip: Int): [Ingredients!]!
  instructions: [String!]!
  title: String!
  updatedAt: DateTime!
}

input RecipeCreateInput {
  createdAt: DateTime
  id: String
  imageUrl: String!
  ingredients: IngredientsCreateManyWithoutRecipeInput
  instructions: RecipeCreateinstructionsInput
  title: String!
  updatedAt: DateTime
}

input RecipeCreateinstructionsInput {
  set: [String!]
}

input RecipeUpdateInput {
  createdAt: DateTime
  id: String
  imageUrl: String
  ingredients: IngredientsUpdateManyWithoutRecipeInput
  instructions: RecipeUpdateinstructionsInput
  title: String
  updatedAt: DateTime
}

input RecipeUpdateinstructionsInput {
  set: [String!]
}

input RecipeWhereUniqueInput {
  id: String
}

type simpleRecipe {
  createdAt: DateTime!
  id: String!
  ingredients: [String!]!
  title: String!
  updatedAt: DateTime!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}
