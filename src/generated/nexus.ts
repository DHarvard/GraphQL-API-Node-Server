/**
 * This file was automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 */

import * as prisma from "@prisma/client"



declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    crud: NexusPrisma<TypeName, 'crud'>
    model: NexusPrisma<TypeName, 'model'>
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  RecipeCreateInput: { // input type
    createdAt?: any | null; // DateTime
    id?: string | null; // String
    imageUrl: string; // String!
    ingredients?: NexusGenInputs['RecipeCreateingredientsInput'] | null; // RecipeCreateingredientsInput
    instructions?: NexusGenInputs['RecipeCreateinstructionsInput'] | null; // RecipeCreateinstructionsInput
    title: string; // String!
    updatedAt?: any | null; // DateTime
  }
  RecipeCreateingredientsInput: { // input type
    set?: string[] | null; // [String!]
  }
  RecipeCreateinstructionsInput: { // input type
    set?: string[] | null; // [String!]
  }
  RecipeUpdateInput: { // input type
    createdAt?: any | null; // DateTime
    id?: string | null; // String
    imageUrl?: string | null; // String
    ingredients?: NexusGenInputs['RecipeUpdateingredientsInput'] | null; // RecipeUpdateingredientsInput
    instructions?: NexusGenInputs['RecipeUpdateinstructionsInput'] | null; // RecipeUpdateinstructionsInput
    title?: string | null; // String
    updatedAt?: any | null; // DateTime
  }
  RecipeUpdateingredientsInput: { // input type
    set?: string[] | null; // [String!]
  }
  RecipeUpdateinstructionsInput: { // input type
    set?: string[] | null; // [String!]
  }
  RecipeWhereUniqueInput: { // input type
    id?: string | null; // String
  }
}

export interface NexusGenEnums {
}

export interface NexusGenRootTypes {
  Ingredients: prisma.Ingredients;
  Mutation: {};
  Query: {};
  Recipe: prisma.Recipe;
  simpleRecipe: prisma.simpleRecipe;
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
  DateTime: any;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  RecipeCreateInput: NexusGenInputs['RecipeCreateInput'];
  RecipeCreateingredientsInput: NexusGenInputs['RecipeCreateingredientsInput'];
  RecipeCreateinstructionsInput: NexusGenInputs['RecipeCreateinstructionsInput'];
  RecipeUpdateInput: NexusGenInputs['RecipeUpdateInput'];
  RecipeUpdateingredientsInput: NexusGenInputs['RecipeUpdateingredientsInput'];
  RecipeUpdateinstructionsInput: NexusGenInputs['RecipeUpdateinstructionsInput'];
  RecipeWhereUniqueInput: NexusGenInputs['RecipeWhereUniqueInput'];
}

export interface NexusGenFieldTypes {
  Ingredients: { // field return type
    id: string; // String!
    quantity: string; // String!
    title: string; // String!
    type: string; // String!
  }
  Mutation: { // field return type
    createOneRecipe: NexusGenRootTypes['Recipe']; // Recipe!
    deleteOneRecipe: NexusGenRootTypes['Recipe'] | null; // Recipe
    updateOneRecipe: NexusGenRootTypes['Recipe'] | null; // Recipe
  }
  Query: { // field return type
    Recipe: NexusGenRootTypes['Recipe'] | null; // Recipe
    Recipes: NexusGenRootTypes['Recipe'][]; // [Recipe!]!
    simpleRecipe: NexusGenRootTypes['simpleRecipe'] | null; // simpleRecipe
    simpleRecipes: NexusGenRootTypes['simpleRecipe'][]; // [simpleRecipe!]!
  }
  Recipe: { // field return type
    createdAt: any; // DateTime!
    id: string; // String!
    ingredients: string[]; // [String!]!
    instructions: string[]; // [String!]!
    title: string; // String!
    updatedAt: any; // DateTime!
  }
  simpleRecipe: { // field return type
    createdAt: any; // DateTime!
    id: string; // String!
    ingredients: string[]; // [String!]!
    title: string; // String!
    updatedAt: any; // DateTime!
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createOneRecipe: { // args
      data: NexusGenInputs['RecipeCreateInput']; // RecipeCreateInput!
    }
    deleteOneRecipe: { // args
      where: NexusGenInputs['RecipeWhereUniqueInput']; // RecipeWhereUniqueInput!
    }
    updateOneRecipe: { // args
      data: NexusGenInputs['RecipeUpdateInput']; // RecipeUpdateInput!
      where: NexusGenInputs['RecipeWhereUniqueInput']; // RecipeWhereUniqueInput!
    }
  }
  Query: {
    Recipe: { // args
      id?: string | null; // ID
    }
    Recipes: { // args
      searchString?: string | null; // String
    }
    simpleRecipe: { // args
      id?: string | null; // ID
    }
    simpleRecipes: { // args
      searchString?: string | null; // String
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Ingredients" | "Mutation" | "Query" | "Recipe" | "simpleRecipe";

export type NexusGenInputNames = "RecipeCreateInput" | "RecipeCreateingredientsInput" | "RecipeCreateinstructionsInput" | "RecipeUpdateInput" | "RecipeUpdateingredientsInput" | "RecipeUpdateinstructionsInput" | "RecipeWhereUniqueInput";

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "DateTime" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: Context.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}